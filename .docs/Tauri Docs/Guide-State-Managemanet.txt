State Management

In a Tauri application, you often need to keep track of the current state of your application or manage the lifecycle of things associated with it. Tauri provides an easy way to manage the state of your application using the Manager API, and read it when commands are called.

Here is a simple example:

use tauri::{Builder, Manager};

struct AppData {
  welcome_message: &'static str,
}

fn main() {
  Builder::default()
    .setup(|app| {
      app.manage(AppData {
        welcome_message: "Welcome to Tauri!",
      });
      Ok(())
    })
    .run(tauri::generate_context!())
    .unwrap();
}

You can later access your state with any type that implements the Manager trait, for example the App instance:

let data = app.state::<AppData>();

For more info, including accessing state in commands, see the Accessing State section.
Mutability

In Rust, you cannot directly mutate values which are shared between multiple threads or when ownership is controlled through a shared pointer such as Arc (or Tauri‚Äôs State). Doing so could cause data races (for example, two writes happening simultaneously).

To work around this, you can use a concept known as interior mutability. For example, the standard library‚Äôs Mutex can be used to wrap your state. This allows you to lock the value when you need to modify it, and unlock it when you are done.

use std::sync::Mutex;

use tauri::{Builder, Manager};

#[derive(Default)]
struct AppState {
  counter: u32,
}

fn main() {
  Builder::default()
    .setup(|app| {
      app.manage(Mutex::new(AppState::default()));
      Ok(())
    })
    .run(tauri::generate_context!())
    .unwrap();
}

The state can now be modified by locking the mutex:

let state = app.state::<Mutex<AppState>>();

// Lock the mutex to get mutable access:
let mut state = state.lock().unwrap();

// Modify the state:
state.counter += 1;

At the end of the scope, or when the MutexGuard is otherwise dropped, the mutex is unlocked automatically so that other parts of your application can access and mutate the data within.
When to use an async mutex

To quote the Tokio documentation, it‚Äôs often fine to use the standard library‚Äôs Mutex instead of an async mutex such as the one Tokio provides:

    Contrary to popular belief, it is ok and often preferred to use the ordinary Mutex from the standard library in asynchronous code ‚Ä¶ The primary use case for the async mutex is to provide shared mutable access to IO resources such as a database connection.

It‚Äôs a good idea to read the linked documentation fully to understand the trade-offs between the two. One reason you would need an async mutex is if you need to hold the MutexGuard across await points.
Do you need Arc?

It‚Äôs common to see Arc used in Rust to share ownership of a value across multiple threads (usually paired with a Mutex in the form of Arc<Mutex<T>>). However, you don‚Äôt need to use Arc for things stored in State because Tauri will do this for you.

In case State‚Äôs lifetime requirements prevent you from moving your state into a new thread you can instead move an AppHandle into the thread and then retrieve your state as shown below in the ‚ÄúAccess state with the Manager trait‚Äù section. AppHandles are deliberately cheap to clone for use-cases like this.
Accessing State
Access state in commands

#[tauri::command]
fn increase_counter(state: State<'_, Mutex<AppState>>) -> u32 {
  let mut state = state.lock().unwrap();
  state.counter += 1;
  state.counter
}

For more information on commands, see Calling Rust from the Frontend.
Async commands

If you are using async commands and want to use Tokio‚Äôs async Mutex, you can set it up the same way and access the state like this:

#[tauri::command]
async fn increase_counter(state: State<'_, Mutex<AppState>>) -> Result<u32, ()> {
  let mut state = state.lock().await;
  state.counter += 1;
  Ok(state.counter)
}

Note that the return type must be Result if you use asynchronous commands.
Access state with the Manager trait

Sometimes you may need to access the state outside of commands, such as in a different thread or in an event handler like on_window_event. In such cases, you can use the state() method of types that implement the Manager trait (such as the AppHandle) to get the state:

use tauri::{Builder, GlobalWindowEvent, Manager};

#[derive(Default)]
struct AppState {
  counter: u32,
}

// In an event handler:
fn on_window_event(event: GlobalWindowEvent) {
    // Get a handle to the app so we can get the global state.
    let app_handle = event.window().app_handle();
    let state = app_handle.state::<Mutex<AppState>>();

    // Lock the mutex to mutably access the state.
    let mut state = state.lock().unwrap();
    state.counter += 1;
}

fn main() {
  Builder::default()
    .setup(|app| {
      app.manage(Mutex::new(AppState::default()));
      Ok(())
    })
    .on_window_event(on_window_event)
    .run(tauri::generate_context!())
    .unwrap();
}

This method is useful when you cannot rely on command injection. For example, if you need to move the state into a thread where using an AppHandle is easier, or if you are not in a command context.
Mismatching Types

Caution

If you use the wrong type for the State parameter, you will get a runtime panic instead of compile time error.

For example, if you use State<'_, AppState> instead of State<'_, Mutex<AppState>>, there won‚Äôt be any state managed with that type.

If you prefer, you can wrap your state with a type alias to prevent this mistake:

use std::sync::Mutex;

#[derive(Default)]
struct AppStateInner {
  counter: u32,
}

type AppState = Mutex<AppStateInner>;

However, make sure to use the type alias as it is, and not wrap it in a Mutex a second time, otherwise you will run into the same issue.



Rust Docs on State


pub struct State<'r, T: Send + Sync + 'static>(/* private fields */);

A guard for a state value.

See Manager::manage for usage examples.
Implementations
Source
impl<'r, T: Send + Sync + 'static> State<'r, T>
Source
pub fn inner(&self) -> &'r T

Retrieve a borrow to the underlying value with a lifetime of 'r. Using this method is typically unnecessary as State implements std::ops::Deref with a std::ops::Deref::Target of T.
Trait Implementations
Source
impl<T: Send + Sync + 'static> Clone for State<'_, T>
Source
fn clone(&self) -> Self
Returns a copy of the value. Read more
1.0.0 ¬∑ Source
fn clone_from(&mut self, source: &Self)
Performs copy-assignment from source. Read more
Source
impl<'r, 'de: 'r, T: Send + Sync + 'static, R: Runtime> CommandArg<'de, R> for State<'r, T>
Source
fn from_command(command: CommandItem<'de, R>) -> Result<Self, InvokeError>

Grabs the State from the CommandItem. This will never fail.
Source
impl<T: Send + Sync + Debug> Debug for State<'_, T>
Source
fn fmt(&self, f: &mut Formatter<'_>) -> Result
Formats the value using the given formatter. Read more
Source
impl<T: Send + Sync + 'static> Deref for State<'_, T>
Source
type Target = T
The resulting type after dereferencing.
Source
fn deref(&self) -> &T
Dereferences the value.
Source
impl<T: Send + Sync + 'static> FunctionArg for State<'_, T>
Source
fn to_datatype(_: &mut TypeMap) -> Option<DataType>
Gets the type of an argument as a DataType. Read more
Source
impl<T: Send + Sync + 'static + PartialEq> PartialEq for State<'_, T>
Source
fn eq(&self, other: &Self) -> bool
Tests for self and other values to be equal, and is used by ==.
1.0.0 ¬∑ Source
fn ne(&self, other: &Rhs) -> bool
Tests for !=. The default implementation is almost always sufficient, and should not be overridden without very good reason.
Auto Trait Implementations
impl<'r, T> Freeze for State<'r, T>
impl<'r, T> RefUnwindSafe for State<'r, T>
where
    T: RefUnwindSafe,
impl<'r, T> Send for State<'r, T>
impl<'r, T> Sync for State<'r, T>
impl<'r, T> Unpin for State<'r, T>
impl<'r, T> UnwindSafe for State<'r, T>
where
    T: RefUnwindSafe,
Blanket Implementations
Source
impl<T> Any for T
where
    T: 'static + ?Sized,
Source
fn type_id(&self) -> TypeId
Gets the TypeId of self. Read more
Source
impl<T> Borrow<T> for T
where
    T: ?Sized,
Source
fn borrow(&self) -> &T
Immutably borrows from an owned value. Read more
Source
impl<T> BorrowMut<T> for T
where
    T: ?Sized,
Source
fn borrow_mut(&mut self) -> &mut T
Mutably borrows from an owned value. Read more
Source
impl<T> CloneToUninit for T
where
    T: Clone,
Source
unsafe fn clone_to_uninit(&self, dst: *mut u8)
üî¨This is a nightly-only experimental API. (clone_to_uninit)
Performs copy-assignment from self to dst. Read more
Source
impl<T> From<T> for T
Source
fn from(t: T) -> T

Returns the argument unchanged.
Source
impl<T, U> Into<U> for T
where
    U: From<T>,
Source
fn into(self) -> U

Calls U::from(self).

That is, this conversion is whatever the implementation of From<T> for U chooses to do.
Source
impl<P, T> Receiver for P
where
    P: Deref<Target = T> + ?Sized,
    T: ?Sized,
Source
type Target = T
üî¨This is a nightly-only experimental API. (arbitrary_self_types)
The target type on which the method may be called.
Source
impl<T> ToOwned for T
where
    T: Clone,
Source
type Owned = T
The resulting type after obtaining ownership.
Source
fn to_owned(&self) -> T
Creates owned data from borrowed data, usually by cloning. Read more
Source
fn clone_into(&self, target: &mut T)
Uses borrowed data to replace owned data, usually by cloning. Read more
Source
impl<T, U> TryFrom<U> for T
where
    U: Into<T>,
Source
type Error = Infallible
The type returned in the event of a conversion error.
Source
fn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>
Performs the conversion.
Source
impl<T, U> TryInto<U> for T
where
    U: TryFrom<T>,
Source
type Error = <U as TryFrom<T>>::Error
The type returned in the event of a conversion error.
Source
fn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>
Performs the conversion.
Source
impl<T> ErasedDestructor for T
where
    T: 'static,
Source
impl<T> Formattable for T
where
    T: Deref,
    <T as Deref>::Target: Formattable,
Source
impl<T> MaybeSendSync for T
Source
impl<T> Parsable for T
where
    T: Deref,
    <T as Deref>::Target: Parsable,
Source
impl<T> UserEvent for T
where
    T: Debug + Clone + Send + 'static,


Rust Docs on State Manager


pub struct StateManager { /* private fields */ }

The Tauri state manager.
Implementations
Source
impl StateManager
Source
pub fn get<T: Send + Sync + 'static>(&self) -> State<'_, T> ‚ìò

Gets the state associated with the specified type.
Source
pub fn try_get<T: Send + Sync + 'static>(&self) -> Option<State<'_, T>>

Gets the state associated with the specified type.
Trait Implementations
Source
impl Debug for StateManager
Source
fn fmt(&self, f: &mut Formatter<'_>) -> Result
Formats the value using the given formatter. Read more
Source
impl Send for StateManager
Source
impl Sync for StateManager
Auto Trait Implementations
impl !Freeze for StateManager
impl RefUnwindSafe for StateManager
impl Unpin for StateManager
impl UnwindSafe for StateManager
Blanket Implementations
Source
impl<T> Any for T
where
    T: 'static + ?Sized,
Source
fn type_id(&self) -> TypeId
Gets the TypeId of self. Read more
Source
impl<T> Borrow<T> for T
where
    T: ?Sized,
Source
fn borrow(&self) -> &T
Immutably borrows from an owned value. Read more
Source
impl<T> BorrowMut<T> for T
where
    T: ?Sized,
Source
fn borrow_mut(&mut self) -> &mut T
Mutably borrows from an owned value. Read more
Source
impl<T> From<T> for T
Source
fn from(t: T) -> T

Returns the argument unchanged.
Source
impl<T, U> Into<U> for T
where
    U: From<T>,
Source
fn into(self) -> U

Calls U::from(self).

That is, this conversion is whatever the implementation of From<T> for U chooses to do.
Source
impl<T, U> TryFrom<U> for T
where
    U: Into<T>,
Source
type Error = Infallible
The type returned in the event of a conversion error.
Source
fn try_from(value: U) -> Result<T, <T as TryFrom<U>>::Error>
Performs the conversion.
Source
impl<T, U> TryInto<U> for T
where
    U: TryFrom<T>,
Source
type Error = <U as TryFrom<T>>::Error
The type returned in the event of a conversion error.
Source
fn try_into(self) -> Result<U, <U as TryFrom<T>>::Error>
Performs the conversion.
Source
impl<T> ErasedDestructor for T
where
    T: 'static,
Source
impl<T> MaybeSendSync for T
